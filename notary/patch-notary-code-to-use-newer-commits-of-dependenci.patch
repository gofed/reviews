From c509c8b0c32e443b2ab945545270b774f27213df Mon Sep 17 00:00:00 2001
From: Jan Chaloupka <jchaloup@redhat.com>
Date: Mon, 7 Mar 2016 10:21:17 +0100
Subject: [PATCH] patch notary code to use newer commits of dependencies

---
 cmd/notary-server/main.go          |  8 ++++----
 cmd/notary-server/main_test.go     | 16 +++++++++-------
 cmd/notary-signer/main.go          |  2 +-
 signer/client/signer_trust.go      |  7 ++++---
 signer/client/signer_trust_test.go |  7 ++++---
 utils/http.go                      |  5 ++---
 6 files changed, 24 insertions(+), 21 deletions(-)

diff --git a/cmd/notary-server/main.go b/cmd/notary-server/main.go
index 4663535..32f5cbd 100644
--- a/cmd/notary-server/main.go
+++ b/cmd/notary-server/main.go
@@ -112,12 +112,12 @@ func getStore(configuration *viper.Viper, allowedBackends []string) (
 		return nil, fmt.Errorf("Error starting DB driver: %s", err.Error())
 	}
 	health.RegisterPeriodicFunc(
-		"DB operational", store.CheckHealth, time.Second*60)
+		"DB operational", time.Second*60, store.CheckHealth)
 	return store, nil
 }
 
 type signerFactory func(hostname, port string, tlsConfig *tls.Config) *client.NotarySigner
-type healthRegister func(name string, checkFunc func() error, duration time.Duration)
+type healthRegister func(name string, duration time.Duration, checkFunc health.CheckFunc)
 
 // parses the configuration and determines which trust service and key algorithm
 // to return
@@ -156,6 +156,7 @@ func getTrustService(configuration *viper.Viper, sFactory signerFactory,
 	minute := 1 * time.Minute
 	hRegister(
 		"Trust operational",
+		minute,
 		// If the trust service fails, the server is degraded but not
 		// exactly unheatlthy, so always return healthy and just log an
 		// error.
@@ -165,8 +166,7 @@ func getTrustService(configuration *viper.Viper, sFactory signerFactory,
 				logrus.Error("Trust not fully operational: ", err.Error())
 			}
 			return nil
-		},
-		minute)
+		})
 	return notarySigner, keyAlgo, nil
 }
 
diff --git a/cmd/notary-server/main_test.go b/cmd/notary-server/main_test.go
index 82fa2a3..e1ed8dd 100644
--- a/cmd/notary-server/main_test.go
+++ b/cmd/notary-server/main_test.go
@@ -18,6 +18,8 @@ import (
 	"github.com/docker/notary/utils"
 	"github.com/spf13/viper"
 	"github.com/stretchr/testify/assert"
+
+	"github.com/docker/distribution/health"
 )
 
 const (
@@ -101,7 +103,7 @@ func TestGetInvalidTrustService(t *testing.T) {
 		`{}`,
 	}
 	var registerCalled = 0
-	var fakeRegister = func(_ string, _ func() error, _ time.Duration) {
+	var fakeRegister = func(_ string, _ time.Duration, _ health.CheckFunc) {
 		registerCalled++
 	}
 
@@ -123,7 +125,7 @@ func TestGetLocalTrustService(t *testing.T) {
 	localConfig := `{"trust_service": {"type": "local", "key_algorithm": "meh"}}`
 
 	var registerCalled = 0
-	var fakeRegister = func(_ string, _ func() error, _ time.Duration) {
+	var fakeRegister = func(_ string, _ time.Duration, _ health.CheckFunc) {
 		registerCalled++
 	}
 
@@ -155,7 +157,7 @@ func TestGetTrustServiceInvalidKeyAlgorithm(t *testing.T) {
 		fmt.Sprintf(configTemplate, "random"),
 	}
 	var registerCalled = 0
-	var fakeRegister = func(_ string, _ func() error, _ time.Duration) {
+	var fakeRegister = func(_ string, _ time.Duration, _ health.CheckFunc) {
 		registerCalled++
 	}
 
@@ -189,7 +191,7 @@ func TestGetTrustServiceTLSMissingCertOrKey(t *testing.T) {
 		fmt.Sprintf(`"tls_client_key": "%s"`, Key),
 	}
 	var registerCalled = 0
-	var fakeRegister = func(_ string, _ func() error, _ time.Duration) {
+	var fakeRegister = func(_ string, _ time.Duration, _ health.CheckFunc) {
 		registerCalled++
 	}
 
@@ -218,7 +220,7 @@ func TestGetTrustServiceNoTLSConfig(t *testing.T) {
 		}
 	}`
 	var registerCalled = 0
-	var fakeRegister = func(_ string, _ func() error, _ time.Duration) {
+	var fakeRegister = func(_ string, _ time.Duration, _ health.CheckFunc) {
 		registerCalled++
 	}
 
@@ -250,7 +252,7 @@ func TestGetTrustServiceTLSSuccess(t *testing.T) {
 		Cert, Key)
 
 	var registerCalled = 0
-	var fakeRegister = func(_ string, _ func() error, _ time.Duration) {
+	var fakeRegister = func(_ string, _ time.Duration, _ health.CheckFunc) {
 		registerCalled++
 	}
 
@@ -280,7 +282,7 @@ func TestGetTrustServiceTLSFailure(t *testing.T) {
 		Key)
 
 	var registerCalled = 0
-	var fakeRegister = func(_ string, _ func() error, _ time.Duration) {
+	var fakeRegister = func(_ string, _ time.Duration, _ health.CheckFunc) {
 		registerCalled++
 	}
 
diff --git a/cmd/notary-signer/main.go b/cmd/notary-signer/main.go
index 4ac8d3e..58c1d46 100644
--- a/cmd/notary-signer/main.go
+++ b/cmd/notary-signer/main.go
@@ -106,7 +106,7 @@ func setUpCryptoservices(configuration *viper.Viper, allowedBackends []string) (
 		}
 
 		health.RegisterPeriodicFunc(
-			"DB operational", dbStore.HealthCheck, time.Second*60)
+			"DB operational", time.Second*60, dbStore.HealthCheck)
 		keyStore = dbStore
 	}
 
diff --git a/signer/client/signer_trust.go b/signer/client/signer_trust.go
index a7d8e54..17fd617 100644
--- a/signer/client/signer_trust.go
+++ b/signer/client/signer_trust.go
@@ -23,7 +23,7 @@ import (
 
 // The only thing needed from grpc.ClientConn is it's state.
 type checkableConnectionState interface {
-	State() grpc.ConnectivityState
+	State() (grpc.ConnectivityState, error)
 }
 
 // RemotePrivateKey is a key that is on a remote service, so no private
@@ -176,8 +176,9 @@ func (trust *NotarySigner) ListAllKeys() map[string]string {
 func (trust *NotarySigner) CheckHealth(timeout time.Duration) error {
 
 	// Do not bother starting checking at all if the connection is broken.
-	if trust.clientConn.State() != grpc.Idle &&
-		trust.clientConn.State() != grpc.Ready {
+	conn_state, err := trust.clientConn.State()
+	if conn_state != grpc.Idle &&
+		conn_state != grpc.Ready {
 		return fmt.Errorf("Not currently connected to trust server.")
 	}
 
diff --git a/signer/client/signer_trust_test.go b/signer/client/signer_trust_test.go
index 2fcc739..0a7c1da 100644
--- a/signer/client/signer_trust_test.go
+++ b/signer/client/signer_trust_test.go
@@ -37,10 +37,11 @@ func (c StubKeyManagementClient) CheckHealth(x context.Context,
 
 type StubGRPCConnection struct {
 	fakeConnStatus grpc.ConnectivityState
+	fakeErr        error
 }
 
-func (c StubGRPCConnection) State() grpc.ConnectivityState {
-	return c.fakeConnStatus
+func (c StubGRPCConnection) State() (grpc.ConnectivityState, error) {
+	return c.fakeConnStatus, c.fakeErr
 }
 
 func stubHealthFunction(t *testing.T, status map[string]string, err error) rpcHealthCheck {
@@ -101,7 +102,7 @@ func TestHealthCheckKMHealthy(t *testing.T) {
 func TestHealthCheckConnectionDied(t *testing.T) {
 	signer := makeSigner(
 		stubHealthFunction(t, make(map[string]string), nil),
-		StubGRPCConnection{grpc.Connecting})
+		StubGRPCConnection{grpc.Connecting, nil})
 	assert.Error(t, signer.CheckHealth(1*time.Second))
 }
 
diff --git a/utils/http.go b/utils/http.go
index 5bf191f..1fdabae 100644
--- a/utils/http.go
+++ b/utils/http.go
@@ -6,7 +6,6 @@ import (
 	"github.com/Sirupsen/logrus"
 	ctxu "github.com/docker/distribution/context"
 	"github.com/docker/distribution/registry/api/errcode"
-	"github.com/docker/distribution/registry/api/v2"
 	"github.com/docker/distribution/registry/auth"
 	"github.com/docker/notary/tuf/signed"
 	"github.com/gorilla/mux"
@@ -63,11 +62,11 @@ func (root *rootHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {
 		var err error
 		if authCtx, err = root.auth.Authorized(ctx, access...); err != nil {
 			if err, ok := err.(auth.Challenge); ok {
-				err.ServeHTTP(w, r)
+				err.SetHeaders(w)
 				w.WriteHeader(http.StatusUnauthorized)
 				return
 			}
-			errcode.ServeJSON(w, v2.ErrorCodeUnauthorized)
+			errcode.ServeJSON(w, errcode.ErrorCodeUnauthorized)
 			return
 		}
 		ctx = authCtx
-- 
1.9.3

